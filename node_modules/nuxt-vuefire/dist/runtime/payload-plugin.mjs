import { Timestamp, GeoPoint } from "firebase/firestore";
import { markRaw } from "vue";
import {
  definePayloadPlugin,
  definePayloadReducer,
  definePayloadReviver
} from "#app";
export default definePayloadPlugin(() => {
  definePayloadReducer(
    "JSONifiable",
    (data) => data != null && typeof data.toJSON === "function" && JSON.stringify(data.toJSON())
  );
  definePayloadReviver("JSONifiable", (data) => {
    const parsed = JSON.parse(data);
    if ("seconds" in parsed && "nanoseconds" in parsed) {
      return markRaw(new Timestamp(parsed.seconds, parsed.nanoseconds));
    }
    if ("latitude" in parsed && "longitude" in parsed) {
      return markRaw(new GeoPoint(parsed.latitude, parsed.longitude));
    }
    return parsed;
  });
  definePayloadReducer("DocumentData", (data) => {
    if (data && typeof data === "object") {
      const idProp = Object.getOwnPropertyDescriptor(data, "id");
      if (idProp && !idProp.enumerable) {
        return {
          ...data,
          id: data.id
        };
      }
    }
  });
  definePayloadReviver(
    "DocumentData",
    (data) => {
      const parsed = typeof data === "string" ? JSON.parse(data) : data;
      const idValue = parsed.id;
      delete parsed.id;
      return Object.defineProperty(parsed, "id", {
        value: idValue
      });
    }
  );
});
