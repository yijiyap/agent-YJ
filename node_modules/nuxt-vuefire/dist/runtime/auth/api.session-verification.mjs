import { getAuth as getAdminAuth } from "firebase-admin/auth";
import {
  readBody,
  setCookie,
  assertMethod,
  defineEventHandler,
  deleteCookie,
  setResponseStatus
} from "h3";
import { ensureAdminApp } from "vuefire/server";
import { logger } from "../logging.mjs";
import { useRuntimeConfig } from "#imports";
export default defineEventHandler(async (event) => {
  assertMethod(event, "POST");
  const { token } = await readBody(event);
  const { vuefire } = useRuntimeConfig();
  const adminApp = ensureAdminApp(
    {
      projectId: vuefire?.options?.config?.projectId,
      ...vuefire?.options?.admin?.options
    },
    "session-verification"
  );
  const adminAuth = getAdminAuth(adminApp);
  logger.debug(token ? "Verifying the token" : "Deleting the session cookie");
  const verifiedIdToken = token ? await adminAuth.verifyIdToken(token) : null;
  if (verifiedIdToken) {
    if ((/* @__PURE__ */ new Date()).getTime() / 1e3 - verifiedIdToken.iat > ID_TOKEN_MAX_AGE) {
      setResponseStatus(event, 301);
    } else {
      const cookie = await adminAuth.createSessionCookie(token, { expiresIn: AUTH_COOKIE_MAX_AGE }).catch((e) => {
        logger.error("Error minting the cookie", e);
      });
      if (cookie) {
        setCookie(event, AUTH_COOKIE_NAME, cookie, {
          maxAge: AUTH_COOKIE_MAX_AGE,
          secure: true,
          httpOnly: true,
          path: "/",
          sameSite: "lax"
        });
        setResponseStatus(event, 201);
        return "";
      } else {
        setResponseStatus(event, 401);
        return "";
      }
    }
  } else {
    deleteCookie(event, AUTH_COOKIE_NAME);
    setResponseStatus(event, 204);
  }
  return "";
});
const ID_TOKEN_MAX_AGE = 5 * 60;
const AUTH_COOKIE_MAX_AGE = 60 * 60 * 24 * 5 * 1e3;
const AUTH_COOKIE_NAME = "__session";
