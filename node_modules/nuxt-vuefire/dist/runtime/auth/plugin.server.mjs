import { getAuth, signInWithCustomToken } from "firebase/auth";
import { getAuth as getAdminAuth } from "firebase-admin/auth";
import { VueFireAuthServer } from "vuefire/server";
import { DECODED_ID_TOKEN_SYMBOL, UserSymbol } from "../constants.mjs";
import { logger } from "../logging.mjs";
import { defineNuxtPlugin, useRequestEvent } from "#app";
export default defineNuxtPlugin(async (nuxtApp) => {
  const event = useRequestEvent();
  const firebaseApp = nuxtApp.$firebaseApp;
  const firebaseAdminApp = nuxtApp.$firebaseAdminApp;
  const adminAuth = getAdminAuth(firebaseAdminApp);
  const auth = getAuth(firebaseApp);
  const decodedToken = nuxtApp[
    // we cannot use a symbol to index
    DECODED_ID_TOKEN_SYMBOL
  ];
  const uid = decodedToken?.uid;
  if (uid) {
    if (auth.currentUser?.uid !== uid) {
      const customToken = await adminAuth.createCustomToken(uid).catch((err) => {
        logger.error("Error creating custom token", err);
        return null;
      });
      if (customToken) {
        const auth2 = getAuth(firebaseApp);
        logger.debug("Signing in with custom token");
        await signInWithCustomToken(auth2, customToken);
      }
    }
    const user = auth.currentUser;
    nuxtApp[
      // we cannot use a symbol to index
      UserSymbol
    ] = user;
    event.context.user = user;
    nuxtApp.payload.vuefireUser = user?.toJSON();
  }
  VueFireAuthServer(firebaseApp, nuxtApp.vueApp, auth.currentUser);
});
