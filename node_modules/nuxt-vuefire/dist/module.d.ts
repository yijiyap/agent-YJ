import * as _nuxt_schema from '@nuxt/schema';
import { FirebaseOptions, FirebaseApp } from 'firebase/app';
import { App } from 'firebase-admin/app';
import * as firebase_auth from 'firebase/auth';
import { AppOptions, ServiceAccount } from 'firebase-admin';
import { VueFireAppCheckOptions } from 'vuefire';

/**
 * @internal
 */
interface _NuxtVueFireAppCheckOptionsBase extends Omit<VueFireAppCheckOptions, 'provider'> {
    provider: 'ReCaptchaV3' | 'ReCaptchaEnterprise' | 'Custom';
}
interface NuxtVueFireAppCheckOptionsReCaptchaV3 extends _NuxtVueFireAppCheckOptionsBase {
    provider: 'ReCaptchaV3';
    key: string;
}
interface NuxtVueFireAppCheckOptionsReCaptchaEnterprise extends _NuxtVueFireAppCheckOptionsBase {
    provider: 'ReCaptchaEnterprise';
    key: string;
}
type NuxtVueFireAppCheckOptions = NuxtVueFireAppCheckOptionsReCaptchaV3 | NuxtVueFireAppCheckOptionsReCaptchaEnterprise;

interface VueFireNuxtModuleOptions {
    /**
     * Should we add the `VueFireFirestoreOptionsAPI` and `VueFireRealtimeDatabaseOptionsAPI` modules?. Pass `true` to add
     * both, or `'firestore'` or `'realtime-database'` to add only one. Pass false to disable.
     * @defaultValue `false`
     */
    optionsApiPlugin?: boolean | 'firestore' | 'database';
    /**
     * Firebase Options passed to `firebase/app`'s `initializeApp()`.
     */
    config?: FirebaseOptions;
    /**
     * Firebase Admin Options.
     */
    admin?: {
        /**
         * Firebase Admin Options passed to `firebase-admin`'s `initializeApp()`.
         */
        options?: Omit<AppOptions, 'credential'>;
        /**
         * Firebase Admin Service Account passed to `firebase-admin`'s `initializeApp()`. Required if you are adding an
         * adminConfig.
         * @deprecated use GOOGLE_APPLICATION_CREDENTIALS env variable instead with the service-account JSON content
         */
        serviceAccount?: string | ServiceAccount;
    };
    /**
     * Enables AppCheck on the client and server. Note you only need to pass the options for the client, on the server,
     * the configuration will be handled automatically.
     */
    appCheck?: NuxtVueFireAppCheckOptions;
    /**
     * Enables the Authentication module and the session cookie. Pass an object to individually customize the modules.
     * @defaultValue `false`
     */
    auth?: boolean | {
        /**
         * Adds the Authentication module to VueFire.
         * @defaultValue `true` if `options.auth` is an object.
         */
        enabled?: boolean;
        /**
         * Enables the `/api/__session` endpoint to mint cookies and verifying the user during SSR. This requires you to
         * configure a [valid Service
         * Account](https://vuefire.vuejs.org/nuxt/getting-started.html#Configuring-the-Admin-SDK) and the valid
         * permissions on your Google Cloud project. You can find more information about what happens behind the scenes
         * in Firebase docs: [Manage Session Cookies](https://firebase.google.com/docs/auth/admin/manage-cookies).
         */
        sessionCookie?: boolean;
    };
    /**
     * Controls whether to use emulators or not. Pass `false` to disable emulators. When set to `true`, emulators are
     * enabled when they are detected in the `firebase.json` file. You still need to run the emulators in parallel to your
     * app.
     *
     * @defaultValue `true`
     * @experimental
     */
    emulators?: boolean | {
        /**
         * Enables the emulators.
         */
        enabled?: boolean;
        /**
         * The host for the Firestore emulator. Defaults to `localhost`.
         */
        host?: string;
        auth?: {
            /**
             * Pass options to `firebase/auth`'s `connectAuthEmulator()`.
             */
            options?: Parameters<typeof firebase_auth.connectAuthEmulator>[2];
        };
    };
}
interface VueFireNuxtModuleOptionsResolved extends Omit<VueFireNuxtModuleOptions, 'emulators' | 'auth'> {
    emulators: Exclude<VueFireNuxtModuleOptions['emulators'], boolean | undefined>;
    auth: Exclude<VueFireNuxtModuleOptions['auth'], boolean | undefined>;
}

type FirebaseEmulatorService = 'auth' | 'database' | 'firestore' | 'functions' | 'storage';
type FirebaseEmulatorsToEnableBase = {
    [key in FirebaseEmulatorService]: {
        host: string;
        port: number;
    };
};
interface FirebaseEmulatorsToEnable extends FirebaseEmulatorsToEnableBase {
    auth: {
        host: string;
        port: number;
        options?: Parameters<typeof firebase_auth.connectAuthEmulator>[2];
    };
}

declare const _default: _nuxt_schema.NuxtModule<VueFireNuxtModuleOptions>;

/**
 * Type Extensions
 */
/**
 * Augments the Nuxt Runtime Config with the VueFire module options.
 */
interface VueFireRuntimeConfig {
    /**
     * Runtime config for the VueFire module.
     */
    vuefire?: {
        /**
         * Options passed to the Nuxt VueFire module
         * @internal
         */
        options?: VueFireNuxtModuleOptionsResolved;
    };
}
interface VueFirePublicRuntimeConfig {
    vuefire?: {
        /**
         * Emulators to enable.
         *
         * @internal
         */
        emulators?: FirebaseEmulatorsToEnable;
    };
}
interface VueFireAppConfig {
    /**
     * Firebase config to initialize the app.
     * @internal
     */
    firebaseConfig: FirebaseOptions;
    /**
     * VueFireNuxt options used within plugins.
     * @internal
     */
    vuefireOptions: Pick<VueFireNuxtModuleOptions, 'appCheck' | 'auth'>;
}
declare module '@nuxt/schema' {
    interface AppConfig extends VueFireAppConfig {
    }
    interface RuntimeConfig extends VueFireRuntimeConfig {
    }
    interface PublicRuntimeConfig extends VueFirePublicRuntimeConfig {
    }
}
declare module '#app' {
    interface NuxtApp {
        /**
         * Firebase App instance.
         */
        $firebaseApp: FirebaseApp;
        /**
         * Firebase Admin app. Only available on the server.
         */
        $firebaseAdminApp: App;
    }
}
declare module '@vue/runtime-core' {
    interface ComponentCustomProperties {
        /**
         * Firebase App instance.
         */
        $firebaseApp: FirebaseApp;
        /**
         * Firebase Admin app. Only available on the server.
         */
        $firebaseAdminApp: App;
    }
}

export { NuxtVueFireAppCheckOptions, NuxtVueFireAppCheckOptionsReCaptchaEnterprise, NuxtVueFireAppCheckOptionsReCaptchaV3, VueFireNuxtModuleOptions, _default as default };
